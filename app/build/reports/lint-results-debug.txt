/Users/bluehawana/Projects/carplayer-kotlin-androidauto/app/lint-baseline.xml: Hint: 5 errors and 109 warnings were filtered out because they are listed in the baseline file, lint-baseline.xml [LintBaseline]
/Users/bluehawana/Projects/carplayer-kotlin-androidauto/app/lint-baseline.xml: Hint: 16 errors/warnings were listed in the baseline file (lint-baseline.xml) but not found in the project; perhaps they have been fixed? Another possible explanation is that lint recently stopped analyzing (and including results from) dependent projects by default. You can turn this back on with android.lintOptions.checkDependencies=true. Unmatched issue types: SetTextI18n (2), UnsafeOptInUsageError (12), UseKtx (2) [LintBaselineFixed]

   Explanation for issues of type "LintBaselineFixed":
   If a lint baseline describes a problem which is no longer reported, then
   the problem has either been fixed, or perhaps the issue type has been
   disabled. In any case, the entry can be removed from the baseline (such
   that if the issue is reintroduced at some point, lint will complain rather
   than just silently starting to match the old baseline entry again.)

/Users/bluehawana/Projects/carplayer-kotlin-androidauto/app/build.gradle:64: Warning: The native library arm64-v8a/libc++_shared.so (from org.videolan.android:libvlc-all:3.5.1) is not 16 KB aligned [Aligned16KB]
    implementation 'org.videolan.android:libvlc-all:3.5.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/bluehawana/.gradle/caches/8.14.3/transforms/2f90f10792dfe3d09721aa151e5f59e3/transformed/libvlc-all-3.5.1/jni/arm64-v8a/libc++_shared.so: Warning: The native library arm64-v8a/libc++_shared.so (from org.videolan.android:libvlc-all:3.5.1) is not 16 KB aligned [Aligned16KB]
/Users/bluehawana/.gradle/caches/8.14.3/transforms/2f90f10792dfe3d09721aa151e5f59e3/transformed/libvlc-all-3.5.1/jni/arm64-v8a/libc++_shared.so: Warning: The native library arm64-v8a/libc++_shared.so (from org.videolan.android:libvlc-all:3.5.1) is not 16 KB aligned [Aligned16KB]

   Explanation for issues of type "Aligned16KB":
   Android has traditionally used 4 KB memory page sizes. However, to support
   future devices that only work with 16 KB aligned libraries apps containing
   native libraries need to be built with 16 KB alignment.

   Apps with 4 KB aligned native libraries may not work correctly on devices
   requiring 16 KB alignment. To ensure compatibility and future-proof your
   app, it is strongly recommended that your native libraries are aligned to
   16 KB boundaries.

   If your app uses any NDK libraries, directly or indirectly through an SDK,
   you should rebuild your app to meet this recommendation. Make sure all
   native libraries within your application, including those from
   dependencies, are built with 16 KB page alignment.

   This lint check looks at all native libraries that your app depends on. If
   any are found to be aligned to 4 KB instead of 16 KB, you will need to
   address this.

   When a library is flagged, first try to update to a newer version that
   supports 16 KB alignment. If an updated version is not available, contact
   the library vendor to ask about their plans for 16 KB support and request a
   compatible version. Updating your libraries proactively will help ensure
   your app works properly on a wider range of devices.

   https://developer.android.com/guide/practices/page-sizes

/Users/bluehawana/Projects/carplayer-kotlin-androidauto/app/src/main/res/drawable/ic_volume_down.xml:1: Warning: The resource R.drawable.ic_volume_down appears to be unused [UnusedResources]
<vector android:height="24dp" android:tint="#FFFFFF"
^
/Users/bluehawana/Projects/carplayer-kotlin-androidauto/app/src/main/res/drawable/ic_volume_max.xml:1: Warning: The resource R.drawable.ic_volume_max appears to be unused [UnusedResources]
<vector android:height="24dp" android:tint="#FFFFFF"
^
/Users/bluehawana/Projects/carplayer-kotlin-androidauto/app/src/main/res/drawable/ic_volume_up.xml:1: Warning: The resource R.drawable.ic_volume_up appears to be unused [UnusedResources]
<vector android:height="24dp" android:tint="#FFFFFF"
^

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

   Available options:

   **skip-libraries** (default is true):
   Whether the unused resource check should skip reporting unused resources in libraries.

   Many libraries will declare resources that are part of the library surface; other modules depending on the library will also reference the resources. To avoid reporting all these resources as unused (in the context of a library), the unused resource check normally skips reporting unused resources in libraries. Instead, run the unused resource check on the consuming app module (along with `checkDependencies=true`).

   However, there are cases where you want to check that all the resources declared in a library are used; in that case, you can disable the skip option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UnusedResources">
           <option name="skip-libraries" value="true" />
       </issue>
   </lint>
   ```

/Users/bluehawana/Projects/carplayer-kotlin-androidauto/app/src/main/java/com/carplayer/iptv/VlcMediaController.kt:52: Warning: Use the KTX extension function String.toUri instead? [UseKtx]
        val media = org.videolan.libvlc.Media(libVLC, Uri.parse(url))
                                                      ~~~~~~~~~~~~~~

   Explanation for issues of type "UseKtx":
   The Android KTX libraries decorates the Android platform SDK as well as
   various libraries with more convenient extension functions available from
   Kotlin, allowing you to use default parameters, named parameters, and
   more.

   Available options:

   **remove-defaults** (default is true):
   Whether to skip arguments that match the defaults provided by the extension.

   Extensions often provide default values for some of the parameters. For example:
   ```kotlin
   fun Path.readLines(charset: Charset = Charsets.UTF_8): List<String> { return Files.readAllLines(this, charset) }
   ```
   This lint check will by default automatically omit parameters that match the default, so if your code was calling

   ```kotlin
   Files.readAllLines(file, Charset.UTF_8)
   ```
   lint would replace this with
   ```kotlin
   file.readLines()
   ```
   rather than

   ```kotlin
   file.readLines(Charset.UTF_8
   ```
   You can turn this behavior off using this option.

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="remove-defaults" value="true" />
       </issue>
   </lint>
   ```

   **require-present** (default is true):
   Whether to only offer extensions already available.

   This option lets you only have lint suggest extension replacements if those extensions are already available on the class path (in other words, you're already depending on the library containing the extension method.)

   To configure this option, use a `lint.xml` file with an <option> like this:

   ```xml
   <lint>
       <issue id="UseKtx">
           <option name="require-present" value="true" />
       </issue>
   </lint>
   ```

0 errors, 7 warnings (and 5 errors, 109 warnings filtered by baseline lint-baseline.xml)
